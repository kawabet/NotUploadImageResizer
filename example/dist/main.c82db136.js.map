{"version":3,"sources":["../../index.js","../node_modules/numeral/numeral.js","main.js"],"names":["base64ToFile","src","resize","name","image","Image","Promise","resolve","reject","onload","type","substring","indexOf","replace","base64","resizeImage","Date","now","file","createFile","onerror","e","pathToFile","name_ext","match","ext","lastIndexOf","length","canvas","document","createElement","context","getContext","ratio","width","height","drawImage","toDataURL","filename","bin","atob","split","len","barr","Uint8Array","i","charCodeAt","File","getOrientation","reader","FileReader","readAsArrayBuffer","addEventListener","orientation","dv","DataView","result","app1MarkerStart","getUint16","littleEndian","getUint8","count","start","OrientationTransformed","readAsDataURL","img","ctx","transform","fileInput","querySelector","originalView","resizeView","originalSizeElement","resizeSizeElement","lengthInput","event","target","files","originalImage","f","setAttribute","innerHTML","append","value","then","res","console","info","url","window","URL","createObjectURL","total","format","size","Math","floor","log"],"mappings":"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","file":"main.c82db136.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n\n/**\n *\n * @param {*} src\n * @param {*} resize\n * @param {*} name\n */\nexport function base64ToFile(src, resize, name) {\n  const image = new Image();\n  image.src = src;\n  return new Promise((resolve, reject) => {\n    image.onload = () => {\n      // これでMIMEタイプが取れてると思うけど若干不安...\n      const type = src.substring(0, src.indexOf(\";\")).replace(\"data:\", \"\");\n      // リサイズしてbase64化\n      let base64 = resizeImage(image, type, resize);\n      // 引数にnameが設定されていない場合\n      if (!name) {\n        name = `${Date.now()}.${type.replace(\"image/\", \"\")}`;\n      }\n      // fileオブジェクトを作成\n      let file = createFile(base64, name, type)\n      resolve(file);\n    };\n    image.onerror = e => reject(e);\n  });\n}\n\n/**\n *\n * @param {*} src\n * @param {*} resize\n */\nexport function pathToFile(src, resize) {\n  const image = new Image();\n  image.src = src;\n  return new Promise((resolve, reject) => {\n    image.onload = () => {\n      // nameとtypeを取得\n      const name_ext = src.match(\".+/(.+?)([?#;].*)?$\")[1];\n      let ext = name_ext.substring(\n        name_ext.lastIndexOf(\".\") + 1,\n        name_ext.length\n      );\n      if (ext == \"jpg\") {\n        ext = \"jpeg\"; // なんか image/jpg　でbase64化すると image/png　になってしまう。\n      }\n      const type = `images/${ext}`;\n      // リサイズしてbase64化\n      let base64 = resizeImage(image, type, resize);\n      // fileオブジェクトを作成\n      let file = createFile(base64, name, type)\n      resolve(file);\n    };\n    image.onerror = e => reject(e);\n  });\n}\n\n/**\n * 指定されたimageをリサイズしてbase64として返します\n * @param {*} image\n * @param {*} type\n * @param {*} resize\n */\nexport function resizeImage(image, type, resize) {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n\n  // リサイズ後のサイズを計算する\n  let ratio, width, height;\n  if (resize && resize > 0) {\n    if (image.width > image.height) {\n      ratio = image.height / image.width;\n      width = resize;\n      height = resize * ratio;\n    } else {\n      ratio = image.width / image.height;\n      width = resize * ratio;\n      height = resize;\n    }\n  } else {\n    width = image.width;\n    height = image.height;\n  }\n  // canvasをリサイズ後のサイズで作る\n  canvas.height = height;\n  canvas.width = width;\n  context.drawImage(image, 0, 0, width, height);\n\n  // canvasからbase64画像データを取得\n  return canvas.toDataURL(type);\n}\n\n/**\n *\n * @param {*} base64_image\n * @param {*} filename\n * @param {*} type\n */\nfunction createFile(base64, filename, type) {\n  // base64からBlobデータを作成\n  let bin = atob(base64.split(\"base64,\")[1]);\n  let len = bin.length;\n  let barr = new Uint8Array(len);\n  let i = 0;\n  while (i < len) {\n    barr[i] = bin.charCodeAt(i);\n    i++;\n  }\n  // Blobをファイル化\n  let file = new File([barr], filename, { type: type });\n  return file;\n}\n\n/**\n *\n * @param {*} file\n * @param {*} orientation\n */\nexport function getOrientation(file) {\n  const reader = new FileReader();\n\n  if (file.type.indexOf(\"image\") < 0) {\n    // 画像ファイル以外の場合は処理を中断\n    return false;\n  }\n\n  return new Promise((resolve, reject) => {\n    reader.readAsArrayBuffer(file);\n    reader.addEventListener(\"load\", () => {\n      let orientation = 0;\n      const dv = new DataView(reader.result);\n      let app1MarkerStart = 2;\n      // もし JFIF で APP0 Marker がある場合は APP1 Marker の取得位置をずらす\n      if (dv.getUint16(app1MarkerStart) !== 65505) {\n        const length = dv.getUint16(4);\n        app1MarkerStart += length + 2;\n      }\n      if (dv.getUint16(app1MarkerStart) !== 65505) {\n        return 0;\n      }\n      // エンディアンを取得\n      const littleEndian = dv.getUint8(app1MarkerStart + 10) === 73;\n      // フィールドの数を確認\n      const count = dv.getUint16(app1MarkerStart + 18, littleEndian);\n      for (let i = 0; i < count; i++) {\n        const start = app1MarkerStart + 20 + i * 12;\n        const tag = dv.getUint16(start, littleEndian);\n        // Orientation の Tag は 274\n        if (tag === 274) {\n          // Orientation は Type が SHORT なので 2byte だけ読む\n          orientation = dv.getUint16(start + 8, littleEndian);\n        }\n      }\n      resolve(orientation);\n    });\n  });\n}\n\n/**\n *\n * @param {*} file\n * @param {*} orientation\n */\nexport function OrientationTransformed(file, orientation) {\n  const reader = new FileReader();\n  if (file.type.indexOf(\"image\") < 0) {\n    // 画像ファイル以外の場合は処理を中断\n    return false;\n  }\n\n  return new Promise((resolve, reject) => {\n    reader.readAsDataURL(file);\n    reader.addEventListener(\"load\", () => {\n      let img = new Image();\n      img.src = reader.result;\n      const type = reader.result\n        .substring(0, reader.result.indexOf(\";\"))\n        .replace(\"data:\", \"\");\n      img.addEventListener(\"load\", () => {\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n\n        if ([5, 6, 7, 8].indexOf(orientation) > -1) {\n          canvas.width = img.height;\n          canvas.height = img.width;\n        } else {\n          canvas.width = img.width;\n          canvas.height = img.height;\n        }\n        switch (orientation) {\n          case 2:\n            ctx.transform(-1, 0, 0, 1, img.width, 0);\n            break;\n          case 3:\n            ctx.transform(-1, 0, 0, -1, img.width, img.height);\n            break;\n          case 4:\n            ctx.transform(1, 0, 0, -1, 0, img.height);\n            break;\n          case 5:\n            ctx.transform(0, 1, 1, 0, 0, 0);\n            break;\n          case 6:\n            ctx.transform(0, 1, -1, 0, img.height, 0);\n            break;\n          case 7:\n            ctx.transform(0, -1, -1, 0, img.height, img.width);\n            break;\n          case 8:\n            ctx.transform(0, -1, 1, 0, 0, img.width);\n            break;\n        }\n        ctx.drawImage(img, 0, 0);\n        const base64 = canvas.toDataURL(type);\n        resolve(base64);\n      });\n    });\n  });\n}\n","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","import {base64ToFile,getOrientation,OrientationTransformed} from '../../index'\nimport numeral from 'numeral'\n\nconst fileInput = document.querySelector('.file-input')\nconst originalView = document.querySelector('.original .preview')\nconst resizeView = document.querySelector('.resize .preview')\nconst originalSizeElement = document.querySelector('.original .size')\nconst resizeSizeElement = document.querySelector('.resize .size')\nconst lengthInput = document.querySelector('.length')\n\nfileInput.addEventListener('change', (event) =>{\n  const file = event.target.files[0]\n  const reader = new FileReader()\n  if( file.type.indexOf('image') < 0){　  // 画像ファイル以外の場合は処理を中断\n    return false;\n  }\n  \n  reader.onload = (async (f) => {\n    let originalImage = document.createElement('img')\n  \n    // ここから回転を修正する処理\n    let orientation = await getOrientation(file)\n    let base64\n    if( orientation > 2){\n      base64 = await OrientationTransformed(file, orientation)\n    }else {\n      base64 = f.target.result\n    }\n    // -----\n\n    originalImage.setAttribute('src',base64 )\n    originalView.innerHTML = ''    \n    resizeView.innerHTML = ''    \n    originalView.append(originalImage)\n    \n    base64ToFile(base64, lengthInput.value,file.name).then((res)=>{\n      console.info(res) // 生成されたFileオブジェクト\n      const url = window.URL.createObjectURL(res)\n      const resizeImage = document.createElement('img')\n      resizeImage.setAttribute('src',url)\n      resizeView.append(resizeImage)\n      originalSizeElement.innerHTML = numeral(f.total).format('0.0 b')\n      resizeSizeElement.innerHTML = `${numeral(res.size).format('0.0 b')} <small>-${Math.floor((1 -  res.size / f.total) * 100) }%</small>`\n      console.log((1-  res.size / f.total) * 100)\n    })\n  }) \n  reader.readAsDataURL(file)\n\n})"]}