{"version":3,"sources":["../../index.js","js/path_to_file.js"],"names":["base64ToFile","src","resize","name","canvas","document","createElement","context","getContext","image","Image","type","substring","indexOf","replace","Promise","resolve","reject","onload","ratio","width","height","drawImage","base64","barr","bin","i","len","toDataURL","atob","split","length","Uint8Array","charCodeAt","Date","now","file","File","onerror","e","pathToFile","name_ext","match","ext","lastIndexOf","targetElement","querySelector","then","res","console","info"],"mappings":"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","file":"path_to_file.98222701.js","sourceRoot":"../src","sourcesContent":["export  function base64ToFile(src, resize, name){\n  const canvas = document.createElement(\"canvas\")\n  const context = canvas.getContext('2d')\n  const image = new Image()\n  // これでMIMEタイプが取れてると思うけど若干不安...\n  const type = src.substring(0,src.indexOf(\";\")).replace('data:','')\n  image.src = src\n  return new Promise((resolve, reject) => {\n    image.onload = (() =>{  \n      // リサイズ後のサイズを計算する  \n      let ratio,width,height;\n      if(resize && resize > 0){\n        if ( image.width > image.height ){\n          ratio = image.height / image.width\n          width = resize\n          height = resize * ratio\n        } else {\n          ratio = image.width / image.height\n          width = resize * ratio\n          height = resize\n        }\n      } else {\n        width = image.width\n        height = image.height\n      }\n      \n      // canvasをリサイズ後のサイズで作る\n      canvas.height = height\n      canvas.width = width\n      context.drawImage(image, 0, 0, width, height)\n  \n      // canvasからbase64画像データを取得\n      const base64 = canvas.toDataURL(type)\n      // base64からBlobデータを作成\n      let barr, bin, i, len\n      bin = atob(base64.split('base64,')[1])\n      len = bin.length;\n      barr = new Uint8Array(len)\n  \n      i = 0\n      while ( i < len ) {\n        barr[i] = bin.charCodeAt(i)\n        i++\n      } \n      \n      // 引数にnameが設定されていない場合\n      if (!name) name = `${Date.now()}.${type.replace('image/','')}`\n      // fileオブジェクトを作成\n      const file = new File( [barr], name , {type:type})\n      resolve(file)\n    })\n    image.onerror = (e) => reject(e)\n  })\n}\n\nexport function pathToFile(src, resize){\n\n  const canvas = document.createElement(\"canvas\")\n  const context = canvas.getContext('2d')\n  const image = new Image()\n  \n\n  const name_ext = src.match(\".+/(.+?)([\\?#;].*)?$\")[1];\n  let ext = name_ext.substring(name_ext.lastIndexOf('.') + 1,name_ext.length);\n  if(ext == 'jpg')ext = 'jpeg' // なんか image/jpg　でbase64化すると image/png　になってしまう。\n  const type = `images/${ext}`\n  image.src = src\n\n  return new Promise((resolve, reject) => {\n    image.onload = (() =>{  \n      let ratio,width,height;\n      if(resize && resize > 0){\n        if ( image.width > image.height ){\n          ratio = image.height / image.width\n          width = resize\n          height = resize * ratio\n        } else {\n          ratio = image.width / image.height\n          width = resize * ratio\n          height = resize\n        }\n      } else {\n        width = image.width\n        height = image.height\n      }\n      canvas.height = height\n      canvas.width = width\n      context.drawImage(image, 0, 0, width, height)\n      \n      const base64 = canvas.toDataURL(type);\n      // base64からBlobデータを作成\n      let barr, bin, i, len\n      bin = atob(base64.split('base64,')[1])\n      len = bin.length;\n      barr = new Uint8Array(len)\n  \n      i = 0\n      while ( i < len ) {\n        barr[i] = bin.charCodeAt(i)\n        i++\n      } \n      \n      // fileオブジェクトを作成\n      const file = new File( [barr], name_ext , {type:type})\n      resolve(file)\n\n\n    })\n    image.onerror = (e) => reject(e)\n  })\n}","import {pathToFile,base64ToFile} from '../../../index'\n\nconst targetElement = document.querySelector('.image')\nconst src = targetElement.src\nvar image = new Image();\nimage.onload = function(){\n\n  pathToFile(src).then((res)=>{\n    console.info(res) // 仕上がり\n\n  })  \n}\n\nimage.src = src;\n\n"]}