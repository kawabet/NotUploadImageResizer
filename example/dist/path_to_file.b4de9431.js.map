{"version":3,"sources":["../../index.js","js/path_to_file.js"],"names":["base64ToFile","src","resize","name","image","Image","Promise","resolve","reject","onload","type","substring","indexOf","replace","base64","resizeImage","Date","now","file","createFile","onerror","e","pathToFile","name_ext","match","ext","lastIndexOf","length","canvas","document","createElement","context","getContext","ratio","width","height","drawImage","toDataURL","filename","bin","atob","split","len","barr","Uint8Array","i","charCodeAt","File","getOrientation","reader","FileReader","readAsArrayBuffer","addEventListener","orientation","dv","DataView","result","app1MarkerStart","getUint16","littleEndian","getUint8","count","start","OrientationTransformed","readAsDataURL","img","ctx","transform","targetElement","querySelector","then","res","console","info"],"mappings":"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","file":"path_to_file.b4de9431.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n\n/**\n *\n * @param {*} src\n * @param {*} resize\n * @param {*} name\n */\nexport function base64ToFile(src, resize, name) {\n  const image = new Image();\n  image.src = src;\n  return new Promise((resolve, reject) => {\n    image.onload = () => {\n      // これでMIMEタイプが取れてると思うけど若干不安...\n      const type = src.substring(0, src.indexOf(\";\")).replace(\"data:\", \"\");\n      // リサイズしてbase64化\n      let base64 = resizeImage(image, type, resize);\n      // 引数にnameが設定されていない場合\n      if (!name) {\n        name = `${Date.now()}.${type.replace(\"image/\", \"\")}`;\n      }\n      // fileオブジェクトを作成\n      let file = createFile(base64, name, type)\n      resolve(file);\n    };\n    image.onerror = e => reject(e);\n  });\n}\n\n/**\n *\n * @param {*} src\n * @param {*} resize\n */\nexport function pathToFile(src, resize) {\n  const image = new Image();\n  image.src = src;\n  return new Promise((resolve, reject) => {\n    image.onload = () => {\n      // nameとtypeを取得\n      const name_ext = src.match(\".+/(.+?)([?#;].*)?$\")[1];\n      let ext = name_ext.substring(\n        name_ext.lastIndexOf(\".\") + 1,\n        name_ext.length\n      );\n      if (ext == \"jpg\") {\n        ext = \"jpeg\"; // なんか image/jpg　でbase64化すると image/png　になってしまう。\n      }\n      const type = `images/${ext}`;\n      // リサイズしてbase64化\n      let base64 = resizeImage(image, type, resize);\n      // fileオブジェクトを作成\n      let file = createFile(base64, name, type)\n      resolve(file);\n    };\n    image.onerror = e => reject(e);\n  });\n}\n\n/**\n * 指定されたimageをリサイズしてbase64として返します\n * @param {*} image\n * @param {*} type\n * @param {*} resize\n */\nexport function resizeImage(image, type, resize) {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n\n  // リサイズ後のサイズを計算する\n  let ratio, width, height;\n  if (resize && resize > 0) {\n    if (image.width > image.height) {\n      ratio = image.height / image.width;\n      width = resize;\n      height = resize * ratio;\n    } else {\n      ratio = image.width / image.height;\n      width = resize * ratio;\n      height = resize;\n    }\n  } else {\n    width = image.width;\n    height = image.height;\n  }\n  // canvasをリサイズ後のサイズで作る\n  canvas.height = height;\n  canvas.width = width;\n  context.drawImage(image, 0, 0, width, height);\n\n  // canvasからbase64画像データを取得\n  return canvas.toDataURL(type);\n}\n\n/**\n *\n * @param {*} base64_image\n * @param {*} filename\n * @param {*} type\n */\nfunction createFile(base64, filename, type) {\n  // base64からBlobデータを作成\n  let bin = atob(base64.split(\"base64,\")[1]);\n  let len = bin.length;\n  let barr = new Uint8Array(len);\n  let i = 0;\n  while (i < len) {\n    barr[i] = bin.charCodeAt(i);\n    i++;\n  }\n  // Blobをファイル化\n  let file = new File([barr], filename, { type: type });\n  return file;\n}\n\n/**\n *\n * @param {*} file\n * @param {*} orientation\n */\nexport function getOrientation(file) {\n  const reader = new FileReader();\n\n  if (file.type.indexOf(\"image\") < 0) {\n    // 画像ファイル以外の場合は処理を中断\n    return false;\n  }\n\n  return new Promise((resolve, reject) => {\n    reader.readAsArrayBuffer(file);\n    reader.addEventListener(\"load\", () => {\n      let orientation = 0;\n      const dv = new DataView(reader.result);\n      let app1MarkerStart = 2;\n      // もし JFIF で APP0 Marker がある場合は APP1 Marker の取得位置をずらす\n      if (dv.getUint16(app1MarkerStart) !== 65505) {\n        const length = dv.getUint16(4);\n        app1MarkerStart += length + 2;\n      }\n      if (dv.getUint16(app1MarkerStart) !== 65505) {\n        return 0;\n      }\n      // エンディアンを取得\n      const littleEndian = dv.getUint8(app1MarkerStart + 10) === 73;\n      // フィールドの数を確認\n      const count = dv.getUint16(app1MarkerStart + 18, littleEndian);\n      for (let i = 0; i < count; i++) {\n        const start = app1MarkerStart + 20 + i * 12;\n        const tag = dv.getUint16(start, littleEndian);\n        // Orientation の Tag は 274\n        if (tag === 274) {\n          // Orientation は Type が SHORT なので 2byte だけ読む\n          orientation = dv.getUint16(start + 8, littleEndian);\n        }\n      }\n      resolve(orientation);\n    });\n  });\n}\n\n/**\n *\n * @param {*} file\n * @param {*} orientation\n */\nexport function OrientationTransformed(file, orientation) {\n  const reader = new FileReader();\n  if (file.type.indexOf(\"image\") < 0) {\n    // 画像ファイル以外の場合は処理を中断\n    return false;\n  }\n\n  return new Promise((resolve, reject) => {\n    reader.readAsDataURL(file);\n    reader.addEventListener(\"load\", () => {\n      let img = new Image();\n      img.src = reader.result;\n      const type = reader.result\n        .substring(0, reader.result.indexOf(\";\"))\n        .replace(\"data:\", \"\");\n      img.addEventListener(\"load\", () => {\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n\n        if ([5, 6, 7, 8].indexOf(orientation) > -1) {\n          canvas.width = img.height;\n          canvas.height = img.width;\n        } else {\n          canvas.width = img.width;\n          canvas.height = img.height;\n        }\n        switch (orientation) {\n          case 2:\n            ctx.transform(-1, 0, 0, 1, img.width, 0);\n            break;\n          case 3:\n            ctx.transform(-1, 0, 0, -1, img.width, img.height);\n            break;\n          case 4:\n            ctx.transform(1, 0, 0, -1, 0, img.height);\n            break;\n          case 5:\n            ctx.transform(0, 1, 1, 0, 0, 0);\n            break;\n          case 6:\n            ctx.transform(0, 1, -1, 0, img.height, 0);\n            break;\n          case 7:\n            ctx.transform(0, -1, -1, 0, img.height, img.width);\n            break;\n          case 8:\n            ctx.transform(0, -1, 1, 0, 0, img.width);\n            break;\n        }\n        ctx.drawImage(img, 0, 0);\n        const base64 = canvas.toDataURL(type);\n        resolve(base64);\n      });\n    });\n  });\n}\n","import {pathToFile,base64ToFile} from '../../../index'\n\nconst targetElement = document.querySelector('.image')\nconst src = targetElement.src\nvar image = new Image();\nimage.onload = function(){\n\n  pathToFile(src).then((res)=>{\n    console.info(res) // 仕上がり\n\n  })  \n}\n\nimage.src = src;\n\n"]}